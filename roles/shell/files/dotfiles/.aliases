# cd
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ~='cd ~'

# git
alias a='git add'
alias d='git diff'
alias s='git status --short --branch'
alias g='git graph'

function git-history()
{
    local _output _query
    while _output=$(
        git graph "$@" \
        | fzf \
            --no-sort \
            --no-mouse \
            --reverse \
            --ansi \
            --query="${_query:-}" \
            --preview="grep -qE ' [0-9a-f]+' <<<{} && git show --color=always \$(sed 's/^[* |\]*\([0-9a-f]*\).*/\1/' <<<{}) | head -n $((LINES - 2))" \
            --print-query \
            --expect=enter)
    do
        _query=$(head -1 <<<"$_output")
        git show --color=always "$(tail -n +3 <<<"$_output" | sed 's/^[* |\]*\([0-9a-f]*\).*/\1/')"
    done
}

function git-working-tree()
{
    local _output
    local _query
    while _output=$(
        git status --short --branch --null --untracked-files=all --ignore-submodules=all \
        | fzf \
            --no-sort \
            --multi \
            --no-mouse \
            --reverse \
            --header-lines=1 \
            --ansi \
            --preview="git diff --color=always -- \"\$(sed 's/^...//' <<<"{}")\" | head -n $((LINES - 2))" \
            --query="${_query:-}" \
            --print-query \
            --expect=ctrl-s,ctrl-u,ctrl-d,enter \
            --read0)
    do
        _query=$(head -n 1 <<<"$_output")
        _key=$(head -n 2 <<<"$_output" | tail -n 1)
        case "$_key" in
            ctrl-s)
                git add -- $(tail -n +3 <<<"$_output" | sed 's/^...//') >/dev/null
                ;;
            ctrl-u)
                git reset -- $(tail -n +3 <<<"$_output" | sed 's/^...//') >/dev/null
                ;;
            ctrl-d)
                git diff -- $(tail -n +3 <<<"$_output" | sed 's/^...//') | less
                ;;
            enter)
                return
                ;;
        esac
    done
}

# grep
alias grep='grep --color=auto'

# less
alias less='less --tabs=4'

# ls
case "$OSTYPE" in
darwin*)
    alias ls='ls -G'
    ;;
linux*|msys)
    alias ls='ls --color'
    ;;
esac

alias l='ls -lF'
alias ll='ls -alF'

# explore
function explore()
{
    local _find_opts
    local _find_opt_type
    local _output
    local _query
    local _name
    local _key
    
    _find_opts=(-o)
    _find_opt_type=
    
    while _output=$(
            command find -L "$PWD" -type d -name .git -prune "${_find_opts[@]}" -print0 2>/dev/null \
            | fzf \
                --no-sort \
                --no-mouse \
                --reverse \
                --ansi \
                --preview="preview '{}' $((LINES - 2))" \
                --query="${_query:-}" \
                --print-query \
                --expect=ctrl-d,ctrl-f,ctrl-c,ctrl-v,enter \
                --read0)
    do
        _query=$(head -n 1 <<<"$_output")
        _name=$(head -n 3 <<<"$_output" | tail -n 1)
        _key=$(head -n 2 <<<"$_output" | tail -n 1)
        case "$_key" in
            ctrl-d)
                if [ "$_find_opt_type" = 'd' ]; then
                    _find_opt_type=
                    _find_opts=(-o)
                else
                    _find_opt_type='d'
                    _find_opts=(-o -type d)
                fi
                ;;
            ctrl-f)
                if [ "$_find_opt_type" = 'f' ]; then
                    _find_opt_type=
                    _find_opts=(-o)
                else
                    _find_opt_type='f'
                    _find_opts=(-o -type f)
                fi
                ;;
            ctrl-c)
                if [ -d "$_name" ]; then
                    BUFFER="cd ${(q)_name}"
                else
                    BUFFER="cd ${(q)_name%/*}"
                fi
                zle accept-line
                return
                ;;
            ctrl-v)
                BUFFER="vi ${(q)_name}"
                zle accept-line
                return
                ;;
            enter)
                if [ -d "$_name" ]; then
                    BUFFER="cd ${(q)_name}"
                else
                    BUFFER="vi ${(q)_name}"
                fi
                zle accept-line
                return
                ;;
        esac
    done
}

function explore-github()
{
    PWD=$HOME/dev/src/github.com explore
}

# history
function search-history()
{
    BUFFER=$(history -nr 1 \
    | fzf \
        --no-sort \
        --no-mouse \
        --reverse \
        --ansi \
        --query="$LBUFFER")
    if (($? != 0)); then
        return
    fi
    CURSOR=$#BUFFER
    zle accept-line
}
